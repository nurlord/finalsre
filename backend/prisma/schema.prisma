// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native"]
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model User {
  id String @id @default(uuid())

  email    String @unique
  username String @unique
  password String

  balance   Float   @default(0)
  firstName String? @map("first_name")
  lastName  String? @map("last_name")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  transactions Transaction[]
  goals        Goal[]

  @@map("users")
}

model Transaction {
  id                String          @id @default(uuid())
  userId            String          @map("user_id")
  category          String
  amount            Float
  description       String?
  type              TransactionType
  dateOfTransaction DateTime        @map("date_of_transaction")
  user              User            @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")

  @@map("transactions")
}

enum TransactionType {
  INCOME
  EXPENSE
}

model Goal {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")
  name          String
  description   String?
  targetAmount  Float    @map("target_amount")
  currentAmount Float    @default(0) @map("current_amount")
  deadline      DateTime
  isCompleted   Boolean  @default(false) @map("is_completed")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt() @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@map("goals")
}
